<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DEPPER on Oopschen的日志</title>
    <link>http://oopschen.github.io/categories/depper/</link>
    <description>Recent content in DEPPER on Oopschen的日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>版权归Ray所有, 授权在MIT协议下.</copyright>
    <lastBuildDate>Thu, 05 Jul 2018 11:24:33 +0000</lastBuildDate>
    
	<atom:link href="http://oopschen.github.io/categories/depper/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux下锁的应用</title>
      <link>http://oopschen.github.io/posts/2018/linux_fcntl_lock_usage/</link>
      <pubDate>Thu, 05 Jul 2018 11:24:33 +0000</pubDate>
      
      <guid>http://oopschen.github.io/posts/2018/linux_fcntl_lock_usage/</guid>
      <description>概述 前不久工作需要实现一个文件转递的应用系统,功能如下:
 数据采集方通过ftp上传文件(大小在200KB) 转递程序监听ftp的上传文件夹,实时转递文件到大数据平台 应用部署在Centos7 64bit  第一版实现 采用vsftpd作为ftp服务器, 配置文件夹并共享给转递程序.转递程序使用1个线程轮寻文件夹, 60个转递线程推送
推送文件到大数据平台.
问题 在实际运行中,出现文件解析失败数量随着数据量增大而增多.经过多方排查, 找奥问题处在并发上: 当文件增多,
ftp服务器写入到硬盘的速度变慢,当转递程序扫描文件夹的时候, 文件虽然已经生成,但文件内容却没有完全写入
完毕, 从而造成读取到文件但解析失败的情况.
探究 那有没有系统锁可以锁住文件, 当文件在被ftp写入的时候,转递程序不去处理这个文件?
在Linux系统下, 有两种锁的机制, 分别是Advisory record Lock和Mandatory lock.
Advisory record lock 一种需要资源竞争者约定俗成,使用同一个api去加锁才能达到资源隔离的目的锁机制.
Mandatory lock 一种内核保证的所有进程间的强制锁,但目前Linux下很多BUG,而且在4.5以后变成可选的特性.不建议使用.
那我们有没有办法用这些机制去保证呢?
vsftpd 如果想使用Advisory record lock去保证锁的话, 必须修改vsftpd的代码,按照标准api实现加锁.
硬着头皮去看下源码, 幸好vsftpd作者考虑到了这点, 在写入文件的时候已经加如了锁的处理.
具体戳这里
Java Advisory record lock 由于转递程序是Java写的, 那怎么使用fcntl呢?难道使用jni吗?会不会太复杂? 首先, 我们了解下Java里面文件锁如何添加:
File outFile = new File(&amp;#34;/tmp/filelock.tmp&amp;#34;); FileOutputStream outputStream = new FileOutputStream(outFile); FileChannel channel = outputStream.getChannel(); FileLock lock = channel.</description>
    </item>
    
  </channel>
</rss>