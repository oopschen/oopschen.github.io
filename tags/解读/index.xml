<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>解读 on Oopschen的日志</title>
    <link>http://oopschen.github.io/tags/%E8%A7%A3%E8%AF%BB/</link>
    <description>Recent content in 解读 on Oopschen的日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>版权归Ray所有, 授权在MIT协议下.</copyright>
    <lastBuildDate>Fri, 02 Aug 2013 15:14:19 +0000</lastBuildDate>
    
	<atom:link href="http://oopschen.github.io/tags/%E8%A7%A3%E8%AF%BB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dig Nginx - Nginx 源代码初见</title>
      <link>http://oopschen.github.io/posts/2013/nginx-overview/</link>
      <pubDate>Fri, 02 Aug 2013 15:14:19 +0000</pubDate>
      
      <guid>http://oopschen.github.io/posts/2013/nginx-overview/</guid>
      <description>最近有点时间,看了下nginx源代码,先对这部分内容做点小札记。
观后感 在没有文档帮助的情况下,我大约花费4天的时间来摸清nginx是怎么工作的(c语言的经验在半年左右)。显然,nginx的源码对于我来说不是那么友好,主要体现在如下方面：
1.函数的代码长度。在nginx的源代码里,阅读到了800+的一段函数,这情何以堪。
2.宏名称大小写。因为个人习惯,宏都是大写的,而nginx中有许多宏都是小写。当然其中有些宏在不同的设置下确实是函数,但我以为还是大写比较容易识别。
3.模块化的全局变量。所谓模块化就是,其实是在编译期间,对全局变量的赋值,包括变量,函数句柄等。而这些变量又是全局的,使得阅读代码的难度增加。
当然,在其中也汲取到了不少东西：
1. 利用cpu的cache line优化内存访问
2. 局部内存池
模块化 nginx的模块化可以说是伪模块化,它不是在运行时期可以添加或删除的模块,而是在编译时期,配置的模块化,当然这也是出于效率考虑。nginx的模块配置由自动生成的ngx_modules.c(源代码目录/objs/ngx_modules.c)决定,这个文件主要定义了全局变量*ngx_modules*这个数组。数组的元素是类型为*ngx_module_t*的全局变量。
ngx_module_t类型包含如下几个元素：
1. 模块名称
2. 模块编号
3. 模块上下文编号
4. 模块生命周期里所需的函数指针
5. 模块类型
6. 模块命令,在文件配置文件解析时,用于设置变量的值
7. 模块上下文,用于配置和保存worker时期的变量值
nginx 初始化 以下是nginx初始化的内容,略过一些检查变量值的步骤： 1. 初始化cycle。cycle包含整个nginx的配置文件信息。其中包含很多的步骤,包括初始化模块,解析配置文件,处理listen的老端口等等。 2. 根据配置文件fork worker进程,每个worker进程都会有各自的epoll,这和我当时预期的不太一致
3. 主进程负责响应用户的命令,包括重启,关闭,启动等等
3. fork 出来的worker进程则开启poll句柄
4. 将配置文件中的listen的端口加入到poll句柄中轮询
5. 当监听的端口被访问的时候,就进入了一般的服务器解析的过程,当然在这个过程中,这个worker进程被独占。
具体代码 说了这些概念性的总结话语,还是来看看代码比较实际,下面的代码追踪是基于linux的epoll配置进行的：
core/nginx.c 所有一切的开端,这中包含了main函数。其中值得看的是两个函数：
1. ngx_os_init, 根据不同的cpu初始化cpu cache line的大小 2. ngx_init_cycle, 初始化cycle 最后我们就到了ngx_master_process_cycle, 处理cycle的步骤
ngx_init_cycle (core/ngx_cycle.c) 这其中的内容可以大致看过,等到后面的步骤可以细看哪些变量被初始化。
ngx_master_process_cycle (os/unix/ngx_process_cycle.c)  ngx_start_worker_processes, 负责fork出worker进程 ngx_start_cache_manager_processes, 负责fork出cache进程   ngx_start_worker_processes (os/unix/ngx_process_cycle.</description>
    </item>
    
  </channel>
</rss>