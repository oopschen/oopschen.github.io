<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on Oopschen的日志</title>
    <link>http://oopschen.github.io/tags/security/</link>
    <description>Recent content in security on Oopschen的日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>版权归Ray所有, 授权在MIT协议下.</copyright>
    <lastBuildDate>Sun, 10 Aug 2014 09:30:39 +0000</lastBuildDate>
    
	<atom:link href="http://oopschen.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chrome Unsafe Port 浅析</title>
      <link>http://oopschen.github.io/posts/2014/chrome-unsafe-ports/</link>
      <pubDate>Sun, 10 Aug 2014 09:30:39 +0000</pubDate>
      
      <guid>http://oopschen.github.io/posts/2014/chrome-unsafe-ports/</guid>
      <description>最近一段时间在和docker愉快的玩耍, 但卡在一个非常奇怪的问题上面&amp;ndash;新建了一个container, 基于centos6的image上安装了nginx一个app, 把host的6001端口映射到container的80端口, 把host的6000端口映射到6000端口.
问题 开起这个container后, 在chrome中访问本地6001端口, 可以看到nginx的默认欢迎页面. 而访问6000端口则不能连接&amp;ndash;是tcp无法建立连接的那种页面. 这就非常奇怪了.
用命令查看
docker port xxx 6000 输出结果是绑定了本地的6000端口没有任何异议.可是为什么无法访问呢?
思路 如此只能用nc工具查看端口是否开起:
nc -v localhost 6000 端口是有输出的, 这就意味着端口是开启的. 接下来只能看是不是nginx的配置问题了, 当然在部署docker的时候nginx.conf文件是经过nginx -t检验的. 这时候就得用curl命令来检验了.
curl http://localhost:6000 由于nginx的配置了autoIndex on, 所以返回的页面中会有文件目录的内容. curl的结果是在预期内的, 也就是说docker的配置和nginx的配置是完全正确的.
是什么引发了这个问题?
方案 由表面证据可以看到, 区别在chrome和curl. 为什么这两个agent会有什么区别? 好吧, 身为一个web开发者, 必须立马打开chrome://net-internals/#events页面查看打开6000页面的时候发生了什么问题. 结果是看到了ERR_UNSAFE_PORT错误, 而这个错误不会在错误页面出现, 当然console里也看不到. 迅速google了一下, 尼玛这确实是chrome干的好事情, 在Chromium的源代码中确实内置这么一个功能&amp;ndash;屏蔽一些已知的端口.
这是为了什么呢?
反思 经过一系列的搜罗, 网上大致给出的解释是出于安全的考虑. 那到底会有怎么样的安全问题呢?(web开发者要有安全意识啊!!!)
安全问题例子 假使我们有一个server listen在6000端口, 并接受request和response的模式, server也在防火墙后. 那么恶意攻击者可以怎么做才能伪造请求攻击server?(这里可以先思考几分钟, 看看有没有黑客的潜质!!!) |
|
|
|
|
|
|
|</description>
    </item>
    
  </channel>
</rss>